// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { CreateOneTimeJobJobsJobsOneTimePostData, CreateOneTimeJobJobsJobsOneTimePostError, CreateOneTimeJobJobsJobsOneTimePostResponse, CreateCronJobJobsJobsCronPostData, CreateCronJobJobsJobsCronPostError, CreateCronJobJobsJobsCronPostResponse, GetJobJobsJobsJobIdGetData, RemoveJobJobsJobsJobIdDeleteData, RemoveJobJobsJobsJobIdDeleteError, RemoveJobJobsJobsJobIdDeleteResponse } from '../types.gen';
import { client, createOneTimeJobJobsJobsOneTimePost, createCronJobJobsJobsCronPost, getJobJobsJobsJobIdGet, removeJobJobsJobsJobIdDelete, getAllJobsJobsJobsGet } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const createOneTimeJobJobsJobsOneTimePostQueryKey = (options: Options<CreateOneTimeJobJobsJobsOneTimePostData>) => [
    createQueryKey("createOneTimeJobJobsJobsOneTimePost", options)
];

export const createOneTimeJobJobsJobsOneTimePostOptions = (options: Options<CreateOneTimeJobJobsJobsOneTimePostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createOneTimeJobJobsJobsOneTimePost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createOneTimeJobJobsJobsOneTimePostQueryKey(options)
}); };

export const createOneTimeJobJobsJobsOneTimePostMutation = () => { const mutationOptions: UseMutationOptions<CreateOneTimeJobJobsJobsOneTimePostResponse, CreateOneTimeJobJobsJobsOneTimePostError, Options<CreateOneTimeJobJobsJobsOneTimePostData>> = {
    mutationFn: async (options) => {
        const { data } = await createOneTimeJobJobsJobsOneTimePost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const createCronJobJobsJobsCronPostQueryKey = (options: Options<CreateCronJobJobsJobsCronPostData>) => [
    createQueryKey("createCronJobJobsJobsCronPost", options)
];

export const createCronJobJobsJobsCronPostOptions = (options: Options<CreateCronJobJobsJobsCronPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createCronJobJobsJobsCronPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createCronJobJobsJobsCronPostQueryKey(options)
}); };

export const createCronJobJobsJobsCronPostMutation = () => { const mutationOptions: UseMutationOptions<CreateCronJobJobsJobsCronPostResponse, CreateCronJobJobsJobsCronPostError, Options<CreateCronJobJobsJobsCronPostData>> = {
    mutationFn: async (options) => {
        const { data } = await createCronJobJobsJobsCronPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getJobJobsJobsJobIdGetQueryKey = (options: Options<GetJobJobsJobsJobIdGetData>) => [
    createQueryKey("getJobJobsJobsJobIdGet", options)
];

export const getJobJobsJobsJobIdGetOptions = (options: Options<GetJobJobsJobsJobIdGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getJobJobsJobsJobIdGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getJobJobsJobsJobIdGetQueryKey(options)
}); };

export const removeJobJobsJobsJobIdDeleteMutation = () => { const mutationOptions: UseMutationOptions<RemoveJobJobsJobsJobIdDeleteResponse, RemoveJobJobsJobsJobIdDeleteError, Options<RemoveJobJobsJobsJobIdDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await removeJobJobsJobsJobIdDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getAllJobsJobsJobsGetQueryKey = (options?: Options) => [
    createQueryKey("getAllJobsJobsJobsGet", options)
];

export const getAllJobsJobsJobsGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getAllJobsJobsJobsGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getAllJobsJobsJobsGetQueryKey(options)
}); };