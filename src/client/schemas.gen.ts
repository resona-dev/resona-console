// This file is auto-generated by @hey-api/openapi-ts

export const APIRequestSchema = {
    properties: {
        url: {
            type: 'string',
            title: 'Url',
            examples: ['http://127.0.0.1:8000']
        },
        method: {
            type: 'string',
            title: 'Method',
            default: 'POST'
        },
        headers: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Headers',
            default: {}
        },
        body: {
            title: 'Body',
            examples: [
                {}
            ]
        }
    },
    type: 'object',
    required: ['url'],
    title: 'APIRequest'
} as const;

export const CronTriggerCreateSchema = {
    properties: {
        cron: {
            type: 'string',
            title: 'Cron',
            examples: ['* * * * *']
        }
    },
    type: 'object',
    required: ['cron'],
    title: 'CronTriggerCreate'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const JobCreateSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id',
            examples: [
                null
            ]
        },
        request: {
            '$ref': '#/components/schemas/APIRequest'
        },
        trigger: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OneTimeTriggerCreate'
                },
                {
                    '$ref': '#/components/schemas/CronTriggerCreate'
                }
            ],
            title: 'Trigger'
        }
    },
    type: 'object',
    required: ['request', 'trigger'],
    title: 'JobCreate'
} as const;

export const JobStatusSchema = {
    type: 'string',
    enum: ['pending', 'active', 'paused'],
    title: 'JobStatus'
} as const;

export const OneTimeTriggerCreateSchema = {
    properties: {
        delay: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Delay'
        },
        date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date'
        }
    },
    type: 'object',
    title: 'OneTimeTriggerCreate'
} as const;

export const ScheduledJobSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        next_run_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Run Time'
        },
        status: {
            '$ref': '#/components/schemas/JobStatus'
        },
        trigger: {
            '$ref': '#/components/schemas/Trigger'
        },
        request: {
            '$ref': '#/components/schemas/APIRequest'
        }
    },
    type: 'object',
    required: ['id', 'next_run_time', 'status', 'trigger', 'request'],
    title: 'ScheduledJob'
} as const;

export const TriggerSchema = {
    properties: {
        type: {
            '$ref': '#/components/schemas/TriggerType'
        },
        fields: {
            title: 'Fields',
            examples: [
                {}
            ]
        }
    },
    type: 'object',
    required: ['type', 'fields'],
    title: 'Trigger'
} as const;

export const TriggerTypeSchema = {
    type: 'string',
    enum: ['one-time', 'cron'],
    title: 'TriggerType'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;